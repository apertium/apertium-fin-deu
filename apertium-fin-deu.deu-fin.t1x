<?xml version="1.0" encoding="UTF-8"?>
<transfer default="chunk">
  <section-def-cats>
    <def-cat n="noun">
      <cat-item tags="n.*"/>
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="prn">
      <cat-item tags="prn.*"/>
    </def-cat>
    <def-cat n="prnpers">
      <cat-item tags="prn.pers.*"/>
    </def-cat>
    <def-cat n="nominal">
      <cat-item tags="n.*"/>
      <cat-item tags="np.*"/>
      <cat-item tags="prn.*"/>
    </def-cat>
    <def-cat n="verbnegation">
      <cat-item lemma="nicht" tags="adv"/>
      <cat-item lemma="kein" tags="adv"/>
    </def-cat>
    <def-cat n="werden">
      <cat-item lemma="werden" tags="vaux.*"/>
      <cat-item lemma="werden" tags="vblex.*"/> <!-- XXX: also not aux? -->
    </def-cat>
    <def-cat n="infinite">
      <cat-item tags="vblex.inf"/>
      <cat-item tags="vblex.ger.*"/>
      <cat-item tags="vaux.inf"/>
      <cat-item tags="vbser.inf"/>
      <cat-item tags="vbhaver.inf"/>
    </def-cat>
    <def-cat n="perfection">
      <cat-item tags="vblex.*.pp"/>
      <cat-item tags="vblex.pp"/>
    </def-cat>
    <def-cat n="haver">
      <cat-item tags="vbhaver.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="adp">
      <cat-item tags="post.*"/>
      <cat-item tags="pr.*"/>
      <cat-item tags="post"/>
      <cat-item tags="pr"/>
    </def-cat>
    <def-cat n="det">
      <cat-item tags="det.*"/>
    </def-cat>
    <def-cat n="cardinal">
      <cat-item tags="num"/>
      <cat-item tags="num.card"/>
      <cat-item tags="num.card.*"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="num.*"/>
      <cat-item tags="num"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item tags="vblex.*"/>
      <cat-item tags="vbser.*"/>
      <cat-item tags="vbmod.*"/>
      <cat-item tags="vaux.*"/>
      <cat-item tags="vbhaver.*"/>
    </def-cat>
    <def-cat n="auxiliary">
      <cat-item tags="vbmod.*"/>
      <cat-item tags="vaux.*"/>
    </def-cat>
    <def-cat n="sent">
      <cat-item tags="sent"/>
    </def-cat>
  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_case">
      <attr-item tags="nom"/>
      <attr-item tags="gen"/>
      <attr-item tags="acc"/>
      <attr-item tags="dat"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
      <attr-item tags="ill"/>
      <attr-item tags="ade"/>
      <attr-item tags="abl"/>
      <attr-item tags="all"/>
      <attr-item tags="par"/>
      <attr-item tags="tra"/>
      <attr-item tags="cmp"/>
      <attr-item tags="lat"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="vblex"/>
      <attr-item tags="vbser"/>
      <attr-item tags="vbmod"/>
      <attr-item tags="vaux"/>
    </def-attr>
    <def-attr n="a_tense">
      <attr-item tags="prs"/>
      <attr-item tags="pis"/>
      <attr-item tags="pri"/>
      <attr-item tags="pii"/>
      <attr-item tags="past"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="adj"/>
    </def-attr>
    <def-attr n="a_adp">
      <attr-item tags="post"/>
      <attr-item tags="pr"/>
    </def-attr>
    <def-attr n="a_noun">
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="det"/>
      <attr-item tags="np.ant.m"/>
      <attr-item tags="np.ant.f"/>
      <attr-item tags="np.ant"/>
      <attr-item tags="np"/>
    </def-attr>
    <def-attr n="a_nominal">
      <attr-item tags="n.acr"/>
      <attr-item tags="n"/>
      <attr-item tags="np.ant.m"/>
      <attr-item tags="np.ant.f"/>
      <attr-item tags="np.ant"/>
      <attr-item tags="np"/>
    </def-attr>
    <def-attr n="a_prn">
      <attr-item tags="prn"/>
    </def-attr>
    <def-attr n="a_number">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
    </def-attr>
    <def-attr n="a_perf">
      <attr-item tags="pp"/>
    </def-attr>
    <def-attr n="a_pers">
      <attr-item tags="p1.sg"/>
      <attr-item tags="p2.sg"/>
      <attr-item tags="p3.sg"/>
      <attr-item tags="p1.pl"/>
      <attr-item tags="p2.pl"/>
      <attr-item tags="p3.pl"/>
    </def-attr>
    <def-attr n="a_numtype">
      <attr-item tags="card"/>
      <attr-item tags="ord"/>
    </def-attr>
    <def-attr n="a_num">
      <attr-item tags="num"/>
    </def-attr>
    <def-attr n="a_inf">
      <attr-item tags="inf"/>
      <attr-item tags="infa"/>
      <attr-item tags="infe"/>
      <attr-item tags="infma"/>
      <attr-item tags="ger"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="number"/>
    <def-var n="case"/>
    <def-var n="tense"/>
    <def-var n="adpcase"/>
    <def-var n="numtype"/>
  </section-def-vars>

  <section-def-macros>
    <def-macro n="test" npar="1">
      <let>
        <var n="number"/>
        <lit v=""/>
      </let>
    </def-macro>
    <def-macro n="numtype-mangler" npar="1">
      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_numtype"/><lit-tag v="card"/></equal>
          </test>
          <let>
            <var n="numtype"/><lit-tag v="card"/>
          </let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_numtype"/><lit-tag v="ord"/></equal>
          </test>
          <let>
            <var n="numtype"/><lit-tag v="ord"/>
          </let>
        </when>
        <otherwise>
          <let>
            <var n="numtype"/><lit-tag v="card"/>
          </let>
        </otherwise>
      </choose>
    </def-macro>
    <def-macro n="tensemood-mangler" npar="1">
      <choose>
        <when>
          <test>
              <equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="pii"/></equal>
          </test>
          <let>
            <var n="tense"/><lit-tag v="past"/>
          </let>
        </when>
        <when>
          <test>
              <equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="prs"/></equal>
          </test>
          <let>
            <var n="tense"/><lit-tag v="pri"/>
          </let>
        </when>
        <when>
          <test>
              <equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="pis"/></equal>
          </test>
          <let>
            <var n="tense"/><lit-tag v="pri"/>
          </let>
        </when>
        <when>
          <test>
              <equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="past"/></equal>
          </test>
          <let>
            <var n="tense"/><lit-tag v="past"/>
          </let>
        </when>
        <otherwise>
          <let>
            <var n="tense"/><lit-tag v="pri"/>
          </let>
        </otherwise>
      </choose>
    </def-macro>
    <def-macro n="case-mangler" npar="1">
      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="acc"/></equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/><lit-tag v="gen"/>
          </let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="dat"/></equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/><lit-tag v="gen"/>
          </let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="cmp"/></equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/>
          </let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_case"/><lit v=""/></equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/>
          </let>
        </when>
        <!-- otherwise, same case -->
      </choose>
    </def-macro>
    <def-macro n="infinite-mangler" npar="1">
      <choose>
        <when>
          <test>
              <equal><clip pos="1" side="sl" part="a_inf"/><lit-tag v="inf"/></equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_inf"/><lit-tag v="infa"/>
          </let>
          <let>
            <var n="case"/><lit-tag v="lat"/>
          </let>
        </when>
        <when>
          <test>
              <equal><clip pos="1" side="sl" part="a_inf"/><lit-tag v="ger"/></equal>
          </test>
          <let>
            <clip pos="1" side="tl" part="a_inf"/><lit-tag v="infma"/>
          </let>
          <let>
            <var n="case"/><lit-tag v="ine"/>
          </let>
        </when>
        <!-- otherwise, same case -->
      </choose>
    </def-macro>
    <def-macro n="adp-mangler" npar="1">
      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="lem"/><lit v="in"/></equal>
          </test>
          <let>
            <var n="adpcase"/><lit-tag v="ine"/>
          </let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="lem"/><lit v="bei"/></equal>
          </test>
          <let>
            <var n="adpcase"/><lit-tag v="ine"/>
          </let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="lem"/><lit v="von"/></equal>
          </test>
          <let>
            <var n="adpcase"/><lit-tag v="ela"/>
          </let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="lem"/><lit v="bis"/></equal>
          </test>
          <let>
            <var n="adpcase"/><lit-tag v="ill"/>
          </let>
        </when>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="lem"/><lit v="als"/></equal>
          </test>
          <let>
            <var n="adpcase"/><lit-tag v="ess"/>
          </let>
        </when>
        <!-- otherwise, same adp case -->
        <otherwise>
          <let>
            <var n="adpcase"/><lit-tag v="nom"/>
          </let>
        </otherwise>
      </choose>
    </def-macro>
  </section-def-macros>

  <section-rules>

    <rule comment="adp det nouns: drop case, det, move case">
      <pattern>
        <pattern-item n="adp"/>
        <pattern-item n="det"/>
        <pattern-item n="nominal"/>
      </pattern>
      <action>
        <call-macro n="adp-mangler">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="case-mangler">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="case-mangler">
          <with-param pos="3"/>
        </call-macro>
        <out>
          <chunk name="NP" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="NP"/></tag>
                <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="3" side="tl" part="lem"/>
              <clip pos="3" side="tl" part="a_nominal"/>
              <clip pos="2" side="tl" part="a_number"/>
              <var n="adpcase"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="nouns haver: adessive structurise!">
      <pattern>
        <pattern-item n="nominal"/>
        <pattern-item n="haver"/>
      </pattern>
      <action>
        <call-macro n="case-mangler">
          <with-param pos="1"/>
      </call-macro>
      <call-macro n="tensemood-mangler">
          <with-param pos="2"/>
      </call-macro>
        <out>
          <chunk name="NP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="N"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_noun"/>
              <clip pos="1" side="tl" part="a_number"/>
              <lit-tag v="ade"/>
          </lu>
          <b/>
          <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <lit-tag v="actv"/>
              <var n="tense"/>
              <clip pos="2" side="tl" part="a_pers"/>
          </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="perfect verbs: re-order, and re-perfect">
      <pattern>
        <pattern-item n="perfection"/>
        <pattern-item n="haver"/>
      </pattern>
      <action>
        <call-macro n="tensemood-mangler">
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="VP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
              <tag><lit-tag v="PERF"/></tag>
            </tags>
            <lu>
              <lit v="olla"/>     <!-- haben -> olla -->
              <lit-tag v="vaux"/> <!-- vbhaver -> vaux -->
              <lit-tag v="actv"/> <!-- 0 -> actv -->
              <var n="tense"/>
              <clip pos="2" side="tl" part="a_pers"/>
            </lu>
            <b/>
            <lu>
              <clip pos="1" side="tl" part="lem"/> <!-- gehen -> tehdä -->
              <clip pos="1" side="tl" part="a_verb"/>
              <lit-tag v="actv"/> <!-- 0 -> actv -->
              <clip pos="1" side="tl" part="a_perf"/> <!-- pp -> pp -->
              <clip pos="2" side="tl" part="a_number"/> <!-- sg from mainv -> sg -->
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="pp werden: passive construction, kill aux and passivise">
      <pattern>
        <pattern-item n="perfection"/>
        <pattern-item n="werden"/>
      </pattern>
      <action>
        <call-macro n="infinite-mangler">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="tensemood-mangler">
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="VP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
              <tag><lit-tag v="AUX"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/> <!-- gehen -> tehdä -->
              <clip pos="1" side="tl" part="a_verb"/> <!-- vblex -->
              <lit-tag v="pasv"/> <!-- 0 -> pasv -->
              <var n="tense"/> <!-- pri -->
              <lit-tag v="impers"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="aux verbs: re-order, and distribute">
      <pattern>
        <pattern-item n="infinite"/>
        <pattern-item n="auxiliary"/>
      </pattern>
      <action>
        <call-macro n="infinite-mangler">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="tensemood-mangler">
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="VP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
              <tag><lit-tag v="AUX"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lem"/>     <!-- mögen -> haluta -->
              <clip pos="2" side="tl" part="a_verb"/> <!-- vbmod/aux/... -> vaux -->
              <lit-tag v="actv"/> <!-- 0 -> actv -->
              <var n="tense"/> <!-- pis -->
              <clip pos="2" side="tl" part="a_pers"/> <!-- p3.sg -->
            </lu>
            <b/>
            <lu>
              <clip pos="1" side="tl" part="lem"/> <!-- gehen -> tehdä -->
              <clip pos="1" side="tl" part="a_verb"/>
              <lit-tag v="actv"/> <!-- 0 -> actv -->
              <clip pos="1" side="tl" part="a_inf"/>
              <clip pos="1" side="tl" part="a_number"/> <!-- sg -> sg -->
              <var n="case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="neg verbs: to neg conneg">
      <pattern>
        <pattern-item n="verbnegation"/>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <call-macro n="tensemood-mangler">
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="VP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
              <tag><lit-tag v="NEG"/></tag>
            </tags>
            <lu>
              <lit v="ei"/>
              <lit-tag v="vblex.neg.actv.p3.sg"/>
            </lu>
            <b/>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <lit-tag v="actv.pri.conneg"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="dets nouns: case mangle">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="noun"/>
      </pattern>
      <action>
        <call-macro n="case-mangler">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="case-mangler">
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="NP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="N"/></tag>
          </tags>
          <!-- usually no dets...
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_noun"/>
              <clip pos="1" side="tl" part="a_number"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
            <b pos="1"/>
           -->
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="a_noun"/>
              <clip pos="1" side="tl" part="a_number"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="prn pers: case mangle and drop mfs">
      <pattern>
        <pattern-item n="prnpers"/>
      </pattern>
      <action>
        <call-macro n="case-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="PRNP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="a_number"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="adp nominal: drop case move case">
      <pattern>
        <pattern-item n="adp"/>
        <pattern-item n="nominal"/>
      </pattern>
      <action>
        <call-macro n="adp-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="NP" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="NP"/></tag>
                <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="a_nominal"/>
              <clip pos="2" side="tl" part="a_number"/>
              <var n="adpcase"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="numeral nouns: partitive or stuff">
      <pattern>
        <pattern-item n="cardinal"/>
        <pattern-item n="nominal"/>
      </pattern>
      <action>
        <call-macro n="numtype-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="MeasureP" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="CountP"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_num"/>
              <lit-tag v="card.sg.nom"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="a_noun"/>
              <lit-tag v="sg.par"/> <!-- either agree or sg.par -->
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="adp numeral: add case and number">
      <pattern>
        <pattern-item n="adp"/>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="adp-mangler">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="numtype-mangler">
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="NumP" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="NumP"/></tag>
                <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="a_num"/>
              <var n="numtype"/>
              <lit-tag v="sg"/>
              <var n="adpcase"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- {{{ single word units last resorts -->
    <rule comment="nouns: case mangle">
      <pattern>
        <pattern-item n="noun"/>
      </pattern>
      <action>
        <call-macro n="case-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="NP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="N"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_noun"/>
              <clip pos="1" side="tl" part="a_number"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="adjs: add case">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="case-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="AP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="A"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <lit-tag v="pos.sg.nom"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="prns: case mangle">
      <pattern>
        <pattern-item n="prn"/>
      </pattern>
      <action>
        <call-macro n="case-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="PrnP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PRN"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="a_number"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="nums: add case, drop pl to sg">
      <pattern>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="numtype-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="NumP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="Num"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_num"/>
              <var n="numtype"/>
              <lit-tag v="sg.nom"/> <!-- deu nums are unnecessarily pl too -->
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="adps: drop case">
      <pattern>
        <pattern-item n="adp"/>
      </pattern>
      <action>
        <out>
          <chunk name="AdpP" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="Adp"/></tag>
                <tag><clip pos="1" side="sl" part="a_case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_adp"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="stranded dets: usually go home">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <out>
          <chunk name="DetP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="Det"/></tag>
          </tags>
          <!-- usually no dets...
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_noun"/>
              <clip pos="1" side="tl" part="a_number"/>
              <clip pos="1" side="tl" part="a_case"/>
            </lu>
            <b pos="1"/>
           -->
          <b/>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="lost perfect verbs: maybe predicative adj">
      <pattern>
        <pattern-item n="perfection"/>
      </pattern>
      <action>
        <call-macro n="tensemood-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="VP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
              <tag><lit-tag v="PERF"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/> <!-- gehen -> tehdä -->
              <clip pos="1" side="tl" part="a_verb"/> <!-- vblex -->
              <lit-tag v="pasv"/> <!-- 0 -> pasv -->
              <clip pos="1" side="tl" part="a_perf"/> <!-- pp -> pp -->
              <lit-tag v="sg"/> <!-- if no other information -->
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="lonely infinitive: map infs and gers">
      <pattern>
        <pattern-item n="infinite"/>
      </pattern>
      <action>
        <call-macro n="infinite-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="VP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
              <tag><lit-tag v="INF"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/> <!-- gehen -> tehdä -->
              <clip pos="1" side="tl" part="a_verb"/>
              <lit-tag v="actv"/> <!-- 0 -> actv -->
              <clip pos="1" side="tl" part="a_inf"/>
              <clip pos="1" side="tl" part="a_number"/> <!-- sg -> sg -->
              <var n="case"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="verbs: add activ passif, change past tags">
      <pattern>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <call-macro n="tensemood-mangler">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="VP" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="V"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <lit-tag v="actv"/>
              <var n="tense"/>
              <clip pos="1" side="tl" part="a_pers"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: SENT">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
        <out>
          <chunk name="sent" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SENT"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <!-- }}} -->
  </section-rules>
</transfer>

<!--
Resources:
    http://wiki.apertium.org/wiki/Chunking:_A_full_example
    http://wiki.apertium.org/wiki/Chunking
    http://wiki.apertium.org/wiki/Apertium_New_Language_Pair_HOWTO#Transfer_rules
    http://wiki.apertium.org/wiki/A_long_introduction_to_transfer_rules
    http://wiki.apertium.org/wiki/Transfer#Adding_structural_transfer_.28grammar.29_rules

vim: set foldmethod=marker: -->
